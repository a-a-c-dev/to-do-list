{"version":3,"sources":["assets/bgImage.png","assets/add-icon.svg","components/BackgroundContainer.js","components/modal/ModalHeader.js","components/modal/ModalFooter.js","components/modal/ModalInput.js","components/modal/ModalForm.js","components/modal/ToggleContent.js","components/tasks/AddTaskBtn.js","components/tasks/ErrorListFull.js","components/common/Spinner.js","hooks/useLocalStorage.js","components/tasks/ContentContainer.js","components/tasks/MainContainer.js","components/common/Header.js","components/common/Footer.js","App.js","index.js"],"names":["module","exports","BackgroundContainer","React","memo","className","src","bgImage","alt","ModalHeader","ModalFooter","closeModal","type","onClick","ModalInput","handleChange","newTaskValue","errors","value","placeholder","onChange","event","target","textRequired","validText","ModalForm","addTask","useState","setNewTaskValue","setErrors","fieldIsValid","useCallback","match","Object","keys","length","optimizedhandle","fn","timerId","args","clearTimeout","setTimeout","debounce","handleSubmit","preventDefault","onSubmit","name","ToggleContent","toggle","content","isShown","setIsShown","Modal","children","ReactDOM","createPortal","document","getElementById","AddTaskBtn","show","addIcon","ErrorListFull","Spinner","useLocalStorage","storageKey","prevState","JSON","parse","localStorage","getItem","setValue","useEffect","setItem","stringify","ListContainer","lazy","ContentContainer","taskName","isCompleted","tasks","setTasks","isListFull","setIsListFull","useMemo","taskList","completeTask","index","deleteTask","splice","hide","fallback","MainContainer","Header","Footer","App","render"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,iKCI9BC,EAAqBC,IAAMC,MAAK,WACzC,OACI,yBAAKC,UAAU,gBACX,yBAAKC,IAAKC,IAASC,IAAI,mB,cCLtBC,EAAcN,IAAMC,MAAK,WAClC,OACI,oCACI,yCAGA,oECNCM,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACzB,OACI,yBAAKN,UAAU,gBACX,4BAAQA,UAAU,UAAUO,KAAK,UAAjC,YACA,4BAAQP,UAAU,YAAYQ,QAASF,GAAvC,WCJCG,EAAa,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,aAAaC,EAA0B,EAA1BA,aAAaC,EAAa,EAAbA,OAClD,OACI,yBAAKZ,UAAU,mBACX,2BAAOa,MAAOF,EAAcG,YAAY,WAAWP,KAAK,OAAOP,UAAU,QAAQe,SAAU,SAAAC,GAAK,OAAIN,EAAaM,EAAMC,OAAOJ,UAC5HD,EACF,wBAAIZ,UAAU,SACTY,EAAOM,cAAcN,EAAOO,WAFxB,OC2CNC,EA3CG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASf,EAAgB,EAAhBA,WAAgB,EACFgB,mBAAS,IADP,mBACnCX,EADmC,KACrBY,EADqB,OAEdD,mBAAS,IAFK,mBAEnCV,EAFmC,KAE3BY,EAF2B,KAWpCC,EAAeC,uBAAa,WAC9B,IAAMd,EAAS,GAKf,OAHKD,IAAcC,EAAOM,aAAe,0CACpCP,EAAagB,MAFE,0BAEkBf,EAAOO,UAAY,8CACzDK,EAAUZ,GAC4B,IAA/BgB,OAAOC,KAAKjB,GAAQkB,SAC7B,CAACnB,IAKGoB,EAAkBL,sBAnBP,SAAAM,GACb,IAAIC,EACJ,OAAO,WAAc,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAClBC,aAAaF,GACbA,EAAUG,YAAW,kBAAMJ,EAAE,WAAF,EAAME,KAAO,MAeVG,EAHf,SAAAxB,GACjBU,EAAgBV,MAEuC,IAErDyB,EAAe,SAAAtB,GACjBA,EAAMuB,iBACDd,MACLJ,EAAQV,GACRY,EAAgB,IAChBjB,MAIJ,OACI,0BAAMkC,SAAUF,GACZ,kBAAClC,EAAD,MACA,kBAAC,EAAD,CAAaM,aAAc,SAAC+B,EAAM5B,GAAP,OAAekB,EAAgBU,EAAK5B,IAAQyB,aAAcA,EAAc1B,OAAQA,IAC3G,kBAAC,EAAD,CAAaN,WAAYA,MCxC/BoC,EAAgB5C,IAAMC,MAAK,YAA0B,IAAvB4C,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAAc,EACxBtB,oBAAS,GADe,mBAC/CuB,EAD+C,KACtCC,EADsC,KAItD,OACE,oCACGH,GAHQ,kBAAMG,GAAW,MAIzBD,GAAWD,GALH,kBAAME,GAAW,UAUnBC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACnBC,IAASC,aACP,yBAAKlD,UAAU,iBACb,yBAAKA,UAAU,SACZgD,IAILG,SAASC,eAAe,gBAMfV,I,gBC1BFW,EAAYvD,IAAMC,MAAK,YAAa,IAAXuD,EAAU,EAAVA,KAClC,OACI,4BAAQtD,UAAU,gBAAgBQ,QAAS8C,GACvC,0CACA,yBAAKrD,IAAKsD,IAASpD,IAAI,iBCNtBqD,EAAe1D,IAAMC,MAAM,WACpC,OACQ,0BAAMC,UAAU,cAAhB,mFCDCyD,G,MAAU,WACrB,OAAO,yBAAKzD,UAAU,UAAf,kBCQM0D,EAVS,SAACC,EAAYC,GAAe,IAAD,IACrBtC,mBAAQ,UAChCuC,KAAKC,MAAMC,aAAaC,QAAQL,WADA,QACgBC,GAFH,mBACxC/C,EADwC,KACjCoD,EADiC,KAQ/C,OAJAC,qBAAU,WACRH,aAAaI,QAAQR,EAAYE,KAAKO,UAAUvD,MAC/C,CAACA,EAAO8C,IAEJ,CAAC9C,EAAOoD,ICAbI,EAAgBC,gBAAK,kBAAK,gCAKnBC,EAAmB,WAAO,IAAD,EACRb,EAAgB,QAAQ,CAC9C,CACEc,SAAU,YACVC,aAAa,GAEf,CACED,SAAU,gBACVC,aAAa,GAEf,CACED,SAAU,gBACVC,aAAa,GAEf,CACED,SAAU,iBACVC,aAAa,GACZ,CACDD,SAAU,gBACVC,aAAa,KAnBe,mBAC3BC,EAD2B,KACpBC,EADoB,OAsBGrD,oBAAS,GAtBZ,mBAsB3BsD,EAtB2B,KAsBfC,EAtBe,KAwB5BxD,EAAUyD,mBAAQ,kBAAI,SAAAN,GAC1B,IAAIO,EAAQ,sBAAOL,GAAP,CAAc,CAAEF,cAC5BG,EAASI,MACT,CAACJ,EAAUD,IACPM,EAAeF,mBAAQ,kBAAK,SAAAG,GAChC,IAAIF,EAAQ,YAAOL,GACnBK,EAASE,GAAOR,aAAeM,EAASE,GAAOR,YAC/CE,EAASI,MACT,CAACJ,EAAUD,IACPQ,EAAaJ,mBAAQ,kBAAI,SAAAG,GAC7B,IAAIF,EAAQ,YAAOL,GACnBK,EAASI,OAAOF,EAAO,GACvBN,EAASI,MACT,CAACJ,EAASD,IAOZ,OAJAR,qBAAU,WACPQ,EAAM5C,QAAQ,GAAI+C,GAAc,GAAMA,GAAc,KACrD,CAACH,EAAMD,YAAYC,EAAM5C,OAAQoD,IAG/B,oCACI,kBAAC,EAAD,CACEvC,OAAQ,SAAAW,GAAI,OACVsB,EACC,kBAACpB,EAAD,MAGC,kBAACH,EAAD,CAAYC,KAAMA,KACfV,QAAS,SAAAwC,GAAI,OACZ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAW/D,QAASA,EAAUf,WAAY8E,QAItD,kBAAC,WAAD,CACIC,SAAU,kBAAC,EAAD,OACV,kBAAChB,EAAD,CAAeK,MAAOA,EAAOQ,WAAYA,EAAYF,aAAcA,OCvEtEM,EAAgB,WAEzB,OACI,yBAAKtF,UAAU,kBACX,kBAACH,EAAD,MACA,kBAAC,EAAD,QCPC0F,EAASzF,IAAMC,MAAK,WAC7B,OACM,wBAAIC,UAAU,UAAd,iBCHGwF,EAAS1F,IAAMC,MAAK,WAC7B,OAEI,yBAAKC,UAAU,UACX,uDCeGyF,G,MAZH,WAGV,OACE,yBAAKzF,UAAU,0BACX,kBAACuF,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,SCZRvC,IAASyC,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,W","file":"static/js/main.ee0df038.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bgImage.b1adbb3e.png\";","module.exports = __webpack_public_path__ + \"static/media/add-icon.84ece57d.svg\";","import React from \"react\";\r\nimport bgImage  from '../assets/bgImage.png';\r\n\r\n\r\nexport const BackgroundContainer =React.memo(() => {\r\n    return (\r\n        <div className=\"bg-container\">\r\n            <img src={bgImage} alt=\"background\"/>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\n\r\nexport const ModalHeader = React.memo(() => {\r\n    return (\r\n        <>\r\n            <h3>\r\n                    Add tasks\r\n            </h3>\r\n            <p>\r\n                     fill in the input with your task.\r\n            </p>\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\n\r\nexport const ModalFooter = ({closeModal}) => {\r\n    return (\r\n        <div className='modal-footer'>\r\n            <button className=\"add-btn\" type=\"submit\">Add task</button>\r\n            <button className=\"close-btn\" onClick={closeModal}>Close</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const ModalInput = ({handleChange,newTaskValue,errors }) => {\r\n    return (\r\n        <div className=\"input-container\">\r\n            <input value={newTaskValue} placeholder=\"New Task\" type=\"text\" className=\"input\" onChange={event => handleChange(event.target.value) } />\r\n            {!errors?null:(\r\n            <h4 className=\"error\">\r\n                {errors.textRequired||errors.validText}\r\n            </h4>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useCallback, useState } from 'react';\r\n\r\nimport  {ModalHeader} from './ModalHeader'\r\nimport { ModalFooter } from './ModalFooter';\r\nimport { ModalInput } from './ModalInput';\r\n\r\nconst ModalForm = ({ addTask, closeModal}) => {\r\n    const [newTaskValue, setNewTaskValue] = useState('')\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const debounce = fn => {\r\n        let timerId;\r\n        return (...args) => {\r\n          clearTimeout(timerId);\r\n          timerId = setTimeout(() => fn(...args), 200);\r\n        }\r\n      };\r\n    const fieldIsValid = useCallback( () => {\r\n        const errors = {};\r\n        const textPattern = /^[a-zA-Z0-9 .!?\"-]+$/\r\n        if (!newTaskValue) errors.textRequired = \"* Text is required, please insert text\";\r\n        if (!newTaskValue.match(textPattern)) errors.validText = \"* Please insert text in English or numbers\";\r\n        setErrors(errors);\r\n        return Object.keys(errors).length === 0\r\n    },[newTaskValue]);\r\n\r\n    const handleChange = value => {\r\n        setNewTaskValue(value);\r\n    }\r\n    const optimizedhandle = useCallback(debounce(handleChange),[]);\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (!fieldIsValid()) return;\r\n        addTask(newTaskValue);\r\n        setNewTaskValue('');\r\n        closeModal();\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <ModalHeader/>\r\n            <ModalInput  handleChange={(name, value)=>optimizedhandle(name,value)} handleSubmit={handleSubmit} errors={errors} />\r\n            <ModalFooter closeModal={closeModal}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ModalForm;","\r\nimport React,{useState} from 'react'\r\nimport  ReactDOM from 'react-dom';\r\n\r\nconst ToggleContent = React.memo(({ toggle, content }) => {\r\n    const [isShown, setIsShown] = useState(false);\r\n    const hide = () => setIsShown(false);\r\n    const show = () => setIsShown(true);\r\n    return (\r\n      <>\r\n        {toggle(show)}\r\n        {isShown && content(hide)}\r\n      </>\r\n    );\r\n  })\r\n  \r\n  export const Modal = ({ children }) => (\r\n    ReactDOM.createPortal(\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n      ,\r\n      document.getElementById('modal-root')\r\n    )\r\n  );\r\n\r\n\r\n\r\nexport default ToggleContent;\r\n","import React from \"react\";\r\nimport addIcon from '../../assets/add-icon.svg'\r\n\r\n\r\nexport const AddTaskBtn =React.memo(({show}) => {\r\n    return (\r\n        <button className=\"btn-add-modal\" onClick={show} >\r\n            <h3> add  task</h3> \r\n            <img src={addIcon} alt=\"Add Icon\"/>\r\n        </button>\r\n    )\r\n})","import React from \"react\";\r\n\r\nexport const ErrorListFull =React.memo( () => {\r\n    return (\r\n            <span className=\"list-error\">* the list can hold up to ten tasks, you have to delete some of your tasks. </span>\r\n    )\r\n})","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nexport const Spinner = () => {\r\n  return <div className=\"loader\"> Loading... </div>;\r\n};\r\n\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useLocalStorage = (storageKey, prevState) => {\r\n    const [value, setValue] = useState(\r\n      JSON.parse(localStorage.getItem(storageKey)) ?? prevState\r\n    );\r\n    useEffect(() => {\r\n      localStorage.setItem(storageKey, JSON.stringify(value));\r\n    }, [value, storageKey]);\r\n  \r\n    return [value, setValue];\r\n  };\r\nexport default useLocalStorage ","import React,{useState,useEffect,useMemo, Suspense, lazy}  from \"react\";\r\nimport ModalForm from \"../modal/ModalForm\";\r\nimport ToggleContent,{Modal} from '../modal/ToggleContent';\r\nimport { AddTaskBtn } from \"./AddTaskBtn\";\r\nimport { ErrorListFull } from \"./ErrorListFull\";\r\n\r\nimport {Spinner} from '../common/Spinner';\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\n\r\n\r\nconst ListContainer = lazy(()=> import (\"./ListContainer\"));\r\n\r\n\r\n\r\n\r\nexport const ContentContainer = () => {\r\n    const [tasks, setTasks] = useLocalStorage('tasks',[\r\n        {\r\n          taskName: 'Fix Wifi.',\r\n          isCompleted: true\r\n        },\r\n        {\r\n          taskName: 'buy groceries',\r\n          isCompleted: false\r\n        },\r\n        {\r\n          taskName: 'Do the dishes',\r\n          isCompleted: false\r\n        },\r\n        {\r\n          taskName: 'Wipe the floor',\r\n          isCompleted: false\r\n        }, {\r\n          taskName: 'Sell the car.',\r\n          isCompleted: true\r\n        }\r\n      ]);\r\n    const [isListFull, setIsListFull]  = useState(false);\r\n\r\n    const addTask = useMemo(()=>taskName => {\r\n      let taskList = [...tasks, { taskName }];\r\n      setTasks(taskList);\r\n    },[setTasks, tasks]);\r\n    const completeTask = useMemo(()=> index => {\r\n      let taskList = [...tasks];\r\n      taskList[index].isCompleted = !taskList[index].isCompleted;\r\n      setTasks(taskList);\r\n    },[setTasks, tasks]);\r\n    const deleteTask = useMemo(()=>index => {\r\n      let taskList = [...tasks];\r\n      taskList.splice(index, 1);\r\n      setTasks(taskList)\r\n    },[setTasks,tasks]);\r\n\r\n    \r\n    useEffect(()=>{\r\n      (tasks.length>=10)?setIsListFull(true):setIsListFull(false);\r\n    },[tasks.isCompleted,tasks.length, deleteTask]);\r\n\r\n    return (\r\n        <>    \r\n            <ToggleContent\r\n              toggle={show =>  \r\n                isListFull?\r\n                (<ErrorListFull/>)\r\n                :\r\n                (\r\n                  <AddTaskBtn show={show}/> )}\r\n                     content={hide => (\r\n                      <Modal>\r\n                        <ModalForm addTask={addTask}  closeModal={hide}/>\r\n                      </Modal>\r\n                )}\r\n            />\r\n            <Suspense  \r\n                fallback={<Spinner />}>\r\n                <ListContainer tasks={tasks} deleteTask={deleteTask} completeTask={completeTask}/>\r\n              </Suspense>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React  from 'react';\r\nimport {BackgroundContainer} from '../BackgroundContainer';\r\nimport {ContentContainer} from './ContentContainer';\r\n\r\n\r\nexport const MainContainer = () => {\r\n\r\n    return (\r\n        <div className='main-container'>\r\n            <BackgroundContainer/>\r\n            <ContentContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const Header = React.memo(() => {\r\n    return  (\r\n          <h1 className=\"header\">To do List</h1>\r\n    ) \r\n})\r\n\r\n","import React from \"react\";\r\n\r\nexport const Footer = React.memo(() => {\r\n    return (\r\n        \r\n        <div className=\"footer\">\r\n            <h3>Created by AAC-dev </h3>\r\n        </div>\r\n    )\r\n})","import React from 'react';\nimport {MainContainer} from './components/tasks/MainContainer';\nimport { Header } from './components/common/Header';\nimport { Footer } from './components/common/Footer';\nimport './App.css';\n\n\n\n\nconst App = () => {\n\n\n  return (\n    <div className=\"todoList-app-container\">\n        <Header/>\n        <MainContainer/>\n        <Footer/>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}